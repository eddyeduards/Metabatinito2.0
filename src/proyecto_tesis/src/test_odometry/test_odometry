#!/usr/bin/env python

import rospy
import tf
from nav_msgs.msg import Odometry
from geometry_msgs.msg import Point, Pose, Quaternion, Twist, Vector3

global x, y, th, vx, vy, vth

x = 0.0
y = 0.0
th = 0.0
vx = 0.0
vy = 0.0
vth = 0.0

def callback_velocidad(data):
    global vx, vy, vth

    vx = data.linear.x
    vy = data.linear.y
    vth = data.angular.z

def callback_posicion(data):
    global x, y, th

    x = data.position.x
    y = data.position.y
    th = data.orientation.z


def inicio():
    global x, y, th, vx, vy, vth

    rospy.init_node('odometry_publisher')
    odom_pub = rospy.Publisher("odom", Odometry, queue_size = 50)

    rospy.Subscriber('/posicion', Pose, callback_posicion)
    rospy.Subscriber('/velocidades', Twist, callback_velocidad)

    odom_broadcaster = tf.TransformBroadcaster()
    current_time = rospy.Time.now()
    rate = rospy.Rate(10)

    while not rospy.is_shutdown():
	current_time = rospy.Time.now()
	odom_quat = tf.transformations.quaternion_from_euler(0, 0, th)
	odom_broadcaster.sendTransform((x,y,0.0),odom_quat,current_time,"odom","map")
	odom = Odometry()
	odom.header.stamp = current_time
	odom.header.frame_id = "odom"

	# Set the position
	odom.pose.pose = Pose(Point(x,y,0.0), Quaternion(*odom_quat))

	# Set the velocity
	odom.child_frame_id = "base_link"
	odom.twist.twist = Twist(Vector3(vx, vy, 0.0), Vector3(0.0, 0.0, vth))

	# Publish the message
	odom_pub.publish(odom)
	rate.sleep()

if __name__ == '__main__':
    try:
	inicio()
    except rospy.ROSInterruptException:
	pass
