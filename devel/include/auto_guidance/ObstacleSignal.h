// Generated by gencpp from file auto_guidance/ObstacleSignal.msg
// DO NOT EDIT!


#ifndef AUTO_GUIDANCE_MESSAGE_OBSTACLESIGNAL_H
#define AUTO_GUIDANCE_MESSAGE_OBSTACLESIGNAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace auto_guidance
{
template <class ContainerAllocator>
struct ObstacleSignal_
{
  typedef ObstacleSignal_<ContainerAllocator> Type;

  ObstacleSignal_()
    : front(0)
    , right(0)
    , left(0)
    , back(0)
    , front_tof(0)
    , f45r(0)
    , f45l(0)
    , fixed_point_flag(false)  {
    }
  ObstacleSignal_(const ContainerAllocator& _alloc)
    : front(0)
    , right(0)
    , left(0)
    , back(0)
    , front_tof(0)
    , f45r(0)
    , f45l(0)
    , fixed_point_flag(false)  {
  (void)_alloc;
    }



   typedef int8_t _front_type;
  _front_type front;

   typedef int8_t _right_type;
  _right_type right;

   typedef int8_t _left_type;
  _left_type left;

   typedef int8_t _back_type;
  _back_type back;

   typedef int8_t _front_tof_type;
  _front_tof_type front_tof;

   typedef int8_t _f45r_type;
  _f45r_type f45r;

   typedef int8_t _f45l_type;
  _f45l_type f45l;

   typedef uint8_t _fixed_point_flag_type;
  _fixed_point_flag_type fixed_point_flag;





  typedef boost::shared_ptr< ::auto_guidance::ObstacleSignal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::auto_guidance::ObstacleSignal_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleSignal_

typedef ::auto_guidance::ObstacleSignal_<std::allocator<void> > ObstacleSignal;

typedef boost::shared_ptr< ::auto_guidance::ObstacleSignal > ObstacleSignalPtr;
typedef boost::shared_ptr< ::auto_guidance::ObstacleSignal const> ObstacleSignalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::auto_guidance::ObstacleSignal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::auto_guidance::ObstacleSignal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace auto_guidance

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'auto_guidance': ['/home/ubuntu/ros_ws/src/auto_guidance/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::auto_guidance::ObstacleSignal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::auto_guidance::ObstacleSignal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_guidance::ObstacleSignal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::auto_guidance::ObstacleSignal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_guidance::ObstacleSignal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::auto_guidance::ObstacleSignal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::auto_guidance::ObstacleSignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b529d4bcafe31815ba1c9b2c75468bf6";
  }

  static const char* value(const ::auto_guidance::ObstacleSignal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb529d4bcafe31815ULL;
  static const uint64_t static_value2 = 0xba1c9b2c75468bf6ULL;
};

template<class ContainerAllocator>
struct DataType< ::auto_guidance::ObstacleSignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "auto_guidance/ObstacleSignal";
  }

  static const char* value(const ::auto_guidance::ObstacleSignal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::auto_guidance::ObstacleSignal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "\n\
int8 front\n\
int8 right\n\
int8 left\n\
int8 back\n\
int8 front_tof\n\
int8 f45r\n\
int8 f45l\n\
bool fixed_point_flag\n\
";
  }

  static const char* value(const ::auto_guidance::ObstacleSignal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::auto_guidance::ObstacleSignal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.front);
      stream.next(m.right);
      stream.next(m.left);
      stream.next(m.back);
      stream.next(m.front_tof);
      stream.next(m.f45r);
      stream.next(m.f45l);
      stream.next(m.fixed_point_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleSignal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::auto_guidance::ObstacleSignal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::auto_guidance::ObstacleSignal_<ContainerAllocator>& v)
  {
    s << indent << "front: ";
    Printer<int8_t>::stream(s, indent + "  ", v.front);
    s << indent << "right: ";
    Printer<int8_t>::stream(s, indent + "  ", v.right);
    s << indent << "left: ";
    Printer<int8_t>::stream(s, indent + "  ", v.left);
    s << indent << "back: ";
    Printer<int8_t>::stream(s, indent + "  ", v.back);
    s << indent << "front_tof: ";
    Printer<int8_t>::stream(s, indent + "  ", v.front_tof);
    s << indent << "f45r: ";
    Printer<int8_t>::stream(s, indent + "  ", v.f45r);
    s << indent << "f45l: ";
    Printer<int8_t>::stream(s, indent + "  ", v.f45l);
    s << indent << "fixed_point_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fixed_point_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AUTO_GUIDANCE_MESSAGE_OBSTACLESIGNAL_H
